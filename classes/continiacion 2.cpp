#include <iostream>
#include <memory>
#include <vector>
#include <string>

class Animal {
protected:
    std::string name;                 // —Å–ø—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω
public:
    explicit Animal(std::string n) : name(std::move(n)) {}
    virtual ~Animal() = default;      // –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤–∏–π –≤–∫–∞–∑—ñ–≤–Ω–∏–∫

    void info() const {               // –∑–≤–∏—á–∞–π–Ω–∏–π (–Ω–µ–≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π) –º–µ—Ç–æ–¥
        std::cout << "I am " << name << "\n";
    }

    virtual void speak() const = 0;   // —á–∏—Å—Ç–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π ‚Äî —Ä–æ–±–∏—Ç—å –∫–ª–∞—Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–º
};

class Dog : public Animal {           // –ø—É–±–ª—ñ—á–Ω–µ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
public:
    explicit Dog(std::string n) : Animal(std::move(n)) {}
    void speak() const override {
        std::cout << "Woof! üê∂\n";
    }
};

class Cat : public Animal {
public:
    explicit Cat(std::string n) : Animal(std::move(n)) {}
    void speak() const override {
        std::cout << "Meow! üê±\n";
    }
};

int main() {
    std::vector<std::unique_ptr<Animal>> zoo;
    zoo.emplace_back(std::make_unique<Dog>("Brovko"));
    zoo.emplace_back(std::make_unique<Cat>("Murka"));

    for (const auto& a : zoo) {
        a->info();   // –≤–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—É –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É
        a->speak();  // –ø–æ–ª—ñ–º–æ—Ä—Ñ–Ω–∏–π –≤–∏–∫–ª–∏–∫ (—É –∫–æ–∂–Ω–æ–≥–æ —Å–≤–æ—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
    }
}